#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_NODES 100

struct Graph {
    int numNodes;
    int adjMatrix[MAX_NODES][MAX_NODES];
};

int minDistance(int dist[], bool visited[], int numNodes) {
    int min = INT_MAX, minIndex, i;
    for (i = 0; i < numNodes; i++) {
        if (visited[i] == false && dist[i] <= min) {
            min = dist[i];
            minIndex = i;
        }
    }
    return minIndex;
}

void printPath(int parent[], int j) {
    if (parent[j] == -1)
        return;

    printPath(parent, parent[j]);

    printf("%d ", j);
}

void printSolution(int dist[], int parent[], int startNode, int numNodes) {
    int i;
    printf("Vertex\t Distance\tPath");
    for (i = 0; i < numNodes; i++) {
        if (i != startNode) {
            printf("\n%d -> %d \t\t %d\t\t%d ", startNode, i, dist[i], startNode);
            printPath(parent, i);
        }
    }
}

void dijkstra(struct Graph* graph, int startNode) {
    int dist[MAX_NODES];
    bool visited[MAX_NODES];
    int parent[MAX_NODES];
    int i, j;

    for (i = 0; i < graph->numNodes; i++) {
        parent[startNode] = -1;
        dist[i] = INT_MAX;
        visited[i] = false;
    }

    dist[startNode] = 0;

    for (i = 0; i < graph->numNodes - 1; i++) {
        int u = minDistance(dist, visited, graph->numNodes);
        visited[u] = true;

        for (j = 0; j < graph->numNodes; j++) {
            if (!visited[j] && graph->adjMatrix[u][j] && dist[u] != INT_MAX && dist[u] + graph->adjMatrix[u][j] < dist[j]) {
                parent[j] = u;
                dist[j] = dist[u] + graph->adjMatrix[u][j];
            }
        }
    }

    printSolution(dist, parent, startNode, graph->numNodes);
}

int main() {
    struct Graph graph;
    int numNodes, i, j, startNode;

    printf("Enter the number of nodes: ");
    scanf("%d", &numNodes);

    graph.numNodes = numNodes;

    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < numNodes; i++) {
        for (j = 0; j < numNodes; j++) {
            scanf("%d", &graph.adjMatrix[i][j]);
        }
    }

    printf("Enter the starting node: ");
    scanf("%d", &startNode);

    dijkstra(&graph, startNode);

    return 0;
}
